def component = [
        front: false,
        back: true,
]

pipeline {
    agent any
    environment {
//         REPO = "s10-webmobile1-sub2/S10P12C207"
        REPO = "https://github.com/sunbongE/MyNameIsBE.git"
    }
    stages {
        stage('Checkout') {
            steps {
//                 checkout scm
                git branch: 'main', url: "${REPO}"
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/backend") {
                    script {
                        sh "ls . -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "ls -al"
                    component.each { entry ->
                        if (entry.value) {
                            sh "docker compose -p myname build --no-cache ${entry.key.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value) {
                            def var = entry.key
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                                sh "docker push ${DOCKER_USER_ID}/myname-${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images') {
            steps {
                script {
                    sh "docker system prune --filter until=1h --force"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value) {
                            def var = entry.key
                            sh "docker compose -p myname pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value) {
                            def var = entry.key
                            try {
                                sh "docker compose -p myname up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker compose -p myname restart ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
    }
}
